"""
Django settings for ecom_chatbot project.

Generated by 'django-admin startproject' using Django 5.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import os
import json
import firebase_admin
from firebase_admin import credentials, firestore


BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = ''

DEBUG = False

ALLOWED_HOSTS = []


INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'chatbot_api',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'corsheaders',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'ecom_chatbot.urls'

CORS_ALLOW_ALL_ORIGINS = True

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ecom_chatbot.wsgi.application'

APP_ID = os.environ.get('__app_id', 'default-app-id')

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases
LOCAL_FIREBASE_KEY_PATH = os.path.join(BASE_DIR, 'ecom-chatbot.json') # cahnge this to name of your firestore credentials

firebase_admin_config = None
firebase_project_id = None
try:
    if '__firebase_config' in os.environ: 
        firebase_admin_config = json.loads(os.environ.get('__firebase_config'))
        print("INFO: Found __firebase_config from environment.")
    elif os.path.exists(LOCAL_FIREBASE_KEY_PATH): # Fallback to local file for dev
        with open(LOCAL_FIREBASE_KEY_PATH, 'r') as f:
            firebase_admin_config = json.load(f)
        print(f"INFO: Loaded Firebase config from local file: {LOCAL_FIREBASE_KEY_PATH}")
    else:
        print("WARNING: No Firebase configuration found. Firebase Admin SDK will not initialize.")

    if firebase_admin_config and not firebase_admin._apps:
        cred = credentials.Certificate(firebase_admin_config)
        firebase_admin.initialize_app(cred)
        print("Firebase Admin SDK initialized successfully.")
        # Extract project_id if it's in the loaded config
        if isinstance(firebase_admin_config, dict) and 'project_id' in firebase_admin_config:
            firebase_project_id = firebase_admin_config['project_id']
    elif firebase_admin._apps:
        print("INFO: Firebase Admin SDK already initialized.")
        # If already initialized, try to get project_id from the existing app
        if firebase_admin.get_app().project_id:
            firebase_project_id = firebase_admin.get_app().project_id
    else:
        print("Firebase Admin SDK not initialized: No config available.")

except Exception as e:
    print(f"ERROR initializing Firebase Admin SDK: {e}")
    firebase_admin_config = None

# Firestore client instance
db = None
if firebase_admin_config and firebase_admin._apps: # Only try to get client if app initialized
    try:
        db = firestore.client()
        print("Firestore client obtained.")
    except Exception as e:
        print(f"ERROR obtaining Firestore client: {e}")

#add the Firestore client to Django's settings so it can be accessed by apps

#APP_ID for Firestore collection path (using project_id from Firebase config)
APP_ID = os.environ.get('__app_id', firebase_project_id or 'default-app-id')
print(f"Using APP_ID for Firestore paths: {APP_ID}")

FIRESTORE_DB = db



DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': '', # database name
        'USER': 'root',                
        'PASSWORD': '', 
        'HOST': '127.0.0.1',           
        'PORT': '3306',                
        'OPTIONS': {
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
        }
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication', # for dajngo admin API access
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.AllowAny',
    ),
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=60), # Access token valid for 60 minutes
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),   #Refresh token valid for 7 days
    "ROTATE_REFRESH_TOKENS": True,                 #Generate new refresh token on refresh
    "BLACKLIST_AFTER_ROTATION": True,              #Blacklist old refresh token
    "UPDATE_LAST_LOGIN": True,                     #Update user's last login date

    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "VERIFYING_KEY": "",
    "AUDIENCE": None,
    "ISSUER": None,
    "JWK_URL": None,
    "LEEWAY": 0,

    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",

    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "TOKEN_USER_CLASS": "rest_framework_simplejwt.models.TokenUser",

    "JTI_CLAIM": "jti",

    "SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",
    "SLIDING_TOKEN_LIFETIME": timedelta(minutes=5),
    "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=1),
}
# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Kolkata'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
